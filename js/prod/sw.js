const FILLER_LENGTH=55,MAX_PAYLOAD_LENGTH=40;function log(e,n){const c="-".repeat(FILLER_LENGTH-e.length);if(!n)return console.log(`[SW] ${c}> ${e}`);if("string"!=typeof n)return console.log(`[SW] ${c}> ${e} `,n);if(n.length<MAX_PAYLOAD_LENGTH)return console.log(`[SW] ${c}> ${e} `,n);const s=n.substr(n.length-MAX_PAYLOAD_LENGTH,1e3);return console.log(`[SW] ${c}> ${e} `,s)}const cacheFilesBefore=["./","../icons/icon_32x32.png","../icons/icon_16x16.png","../icons/icon_192x192.png","../icons/icon_256x256.png","../icons/icon_512x512.png"],cacheFilesAfter=["../js/prod/client.js","../js/prod/app.js","../js/prod/sign.js","../js/prod/www.js","../icons/icon_57x57.png","../icons/icon_60x60.png","../icons/icon_72x72.png","../icons/icon_76x76.png","../icons/icon_114x114.png","../icons/icon_120x120.png","../icons/icon_144x144.png","../icons/icon_152x152.png","../icons/icon_180x180.png","../splash/screen_640x1136.png","../splash/screen_750x1334.png","../splash/screen_1125x2436.png","../splash/screen_1242x2208.png","../splash/screen_828x1792.png","../splash/screen_1242x2688.png","../splash/screen_1536x2048.png","../splash/screen_1668x2224.png","../splash/screen_1668x2388.png","../splash/screen_2048x2732.png"];let cache,cache$1;function onInstall(e){e.waitUntil(self.caches.open(self.cacheName).then(e=>(log("Installed",cache=e),cache.addAll(cacheFilesBefore))).then(()=>self.skipWaiting()).then(()=>cache.addAll(cacheFilesAfter)).catch(e=>{log("Install: Error",e)}))}function onActivate(e){e.waitUntil(self.caches.keys().then(e=>(log("Activated"),Promise.all(e.filter(e=>e!==self.cacheName).map(e=>{log("Removing cached files from ",e),self.caches.delete(e)})))).then(()=>(log("Claiming clients"),self.clients.claim())))}function onFetch(e){const n=e.request.url,c=e.request.destination;switch(log("Request Destination",c),c){case"style":case"script":case"manifest":case"document":case"font":case"image":return log("Fetching cache then network",n),void e.respondWith(self.caches.open(self.cacheName).then(n=>(cache$1=n).match(e.request)).then(n=>n?(log("Serving from cache",n.url),n):self.fetch(e.request)).then(c=>(log("Catching",n),e.waitUntil(cache$1.put(e.request,c.clone())),c)).catch(e=>{log("Fetch error",e)}));default:return log("Fetching network only",n),void e.respondWith(self.fetch(e.request))}}self.cacheName="v1",self.addEventListener("install",onInstall),self.addEventListener("activate",onActivate),self.addEventListener("fetch",onFetch);