const FILLER_LENGTH=55,MAX_PAYLOAD_LENGTH=40;function log(s,e){const n="-".repeat(FILLER_LENGTH-s.length);if(!e)return console.log(`[SW] ${n}> ${s}`);if("string"!=typeof e)return console.log(`[SW] ${n}> ${s} `,e);if(e.length<MAX_PAYLOAD_LENGTH)return console.log(`[SW] ${n}> ${s} `,e);const c=e.substr(e.length-MAX_PAYLOAD_LENGTH,1e3);return console.log(`[SW] ${n}> ${s} `,c)}const cacheFilesBefore=["./","./assets/icons/icon_32x32.png","./assets/icons/icon_16x16.png","./assets/icons/icon_192x192.png","./assets/icons/icon_256x256.png","./assets/icons/icon_512x512.png"],cacheFilesAfter=["./js/prod/client.js","./js/prod/app.js","./js/prod/sign.js","./js/prod/www.js","./assets/icons/icon_57x57.png","./assets/icons/icon_60x60.png","./assets/icons/icon_72x72.png","./assets/icons/icon_76x76.png","./assets/icons/icon_114x114.png","./assets/icons/icon_120x120.png","./assets/icons/icon_144x144.png","./assets/icons/icon_152x152.png","./assets/icons/icon_180x180.png","./assets/splash/screen_640x1136.png","./assets/splash/screen_750x1334.png","./assets/splash/screen_1125x2436.png","./assets/splash/screen_1242x2208.png","./assets/splash/screen_828x1792.png","./assets/splash/screen_1242x2688.png","./assets/splash/screen_1536x2048.png","./assets/splash/screen_1668x2224.png","./assets/splash/screen_1668x2388.png","./assets/splash/screen_2048x2732.png"];let cache,cache$1;function onInstall(s){s.waitUntil(self.caches.open(self.cacheName).then(s=>(log("Installed",cache=s),cache.addAll(cacheFilesBefore))).then(()=>self.skipWaiting()).then(()=>cache.addAll(cacheFilesAfter)).catch(s=>{log("Install: Error",s)}))}function onActivate(s){s.waitUntil(self.caches.keys().then(s=>(log("Activated"),Promise.all(s.filter(s=>s!==self.cacheName).map(s=>{log("Removing cached files from ",s),self.caches.delete(s)})))).then(()=>(log("Claiming clients"),self.clients.claim())))}function onFetch(s){const e=s.request.url,n=s.request.destination;switch(log("Request Destination",n),n){case"style":case"script":case"manifest":case"document":case"font":case"image":return log("Fetching cache then network",e),void s.respondWith(self.caches.open(self.cacheName).then(e=>(cache$1=e).match(s.request)).then(e=>e?(log("Serving from cache",e.url),e):self.fetch(s.request)).then(n=>(log("Catching",e),s.waitUntil(cache$1.put(s.request,n.clone())),n)).catch(s=>{log("Fetch error",s)}));default:return log("Fetching network only",e),void s.respondWith(self.fetch(s.request))}}self.cacheName="v1",self.addEventListener("install",onInstall),self.addEventListener("activate",onActivate),self.addEventListener("fetch",onFetch);